#!/bin/bash

# Directory to store Pokémon data
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Error log file
ERROR_LOG="errors.txt"
> "$ERROR_LOG"  # Clear previous errors

# Function to fetch Pokémon data with retry logic
fetch_pokemon() {
    local name="$1"
    local retries=3
    local attempt=1
    local success=false

    echo "Fetching data for $name..."

    while [ $attempt -le $retries ]; do
        # Fetch data quietly (-s) and capture HTTP status code
        response=$(curl -s -w "%{http_code}" -o "$OUTPUT_DIR/$name.json" "https://pokeapi.co/api/v2/pokemon/$name")
        status_code="${response:(-3)}"

        if [ "$status_code" -eq 200 ]; then
            echo "Saved data to $OUTPUT_DIR/$name.json ✅"
            success=true
            break
        else
            echo "Attempt $attempt failed for $name (HTTP $status_code). Retrying..."
            sleep 1
            attempt=$((attempt+1))
        fi
    done

    if [ "$success" = false ]; then
        echo "Failed to fetch data for $name after $retries attempts ❌" | tee -a "$ERROR_LOG"
        [ -f "$OUTPUT_DIR/$name.json" ] && rm "$OUTPUT_DIR/$name.json"
    fi
}

# Fetch all Pokémon in parallel
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon" &
done

# Wait for all background jobs to finish
wait

echo
echo "All Pokémon fetch operations completed."
echo "Errors logged to $ERROR_LOG (if any)."

